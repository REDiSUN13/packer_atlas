import streamlit as st
import io
import json
import zipfile
from PIL import Image
import base64

class TextureAtlasPacker:
    def __init__(self, max_size=16384):
        self.max_size = max_size
        self.images = []

    def add_image(self, image_data, name):
        """–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏"""
        try:
            img = Image.open(image_data)

            # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ RGBA —Ñ–æ—Ä–º–∞—Ç–µ
            if img.mode != 'RGBA':
                img = img.convert('RGBA')

            # –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
            bbox = img.getbbox()
            if bbox:
                img = img.crop(bbox)
            else:
                return False, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ"

            self.images.append({
                'name': name,
                'image': img,
                'width': img.width,
                'height': img.height
            })

            return True, f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {name} ({img.width}x{img.height})"

        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"

    def pack_textures(self):
        """–£–ø–∞–∫–æ–≤–∞—Ç—å –≤—Å–µ —Ç–µ–∫—Å—Ç—É—Ä—ã –≤ –∞—Ç–ª–∞—Å"""
        if not self.images:
            return None, None, "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏"

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É
        self.images.sort(key=lambda x: x['width'] * x['height'], reverse=True)

        # –ù–∞–π–¥–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∞—Ç–ª–∞—Å–∞
        atlas_width, atlas_height = self._calculate_atlas_size()

        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –∞—Ç–ª–∞—Å
        atlas = Image.new('RGBA', (atlas_width, atlas_height), (0, 0, 0, 0))

        # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        packed_rects = self._pack_rectangles(atlas_width, atlas_height)

        successful_packs = sum(1 for rect in packed_rects if rect['fit'])
        if successful_packs == 0:
            return None, None, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–ø–∞–∫–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

        # –†–∞–∑–º–µ—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∞—Ç–ª–∞—Å–µ
        atlas_info = {}
        for i, rect in enumerate(packed_rects):
            if rect['fit']:
                x, y = rect['fit']['x'], rect['fit']['y']
                img_data = self.images[i]
                atlas.paste(img_data['image'], (x, y), img_data['image'])

                atlas_info[img_data['name']] = {
                    'x': x, 'y': y,
                    'width': img_data['width'],
                    'height': img_data['height']
                }

        status = f"–£–ø–∞–∫–æ–≤–∞–Ω–æ {len(atlas_info)} –∏–∑ {len(self.images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –†–∞–∑–º–µ—Ä –∞—Ç–ª–∞—Å–∞: {atlas_width}x{atlas_height}"
        return atlas, atlas_info, status

    def _calculate_atlas_size(self):
        """–í—ã—á–∏—Å–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∞—Ç–ª–∞—Å–∞"""
        total_area = sum(img['width'] * img['height'] for img in self.images)
        size = int((total_area ** 0.5) * 1.3)
        size = self._next_power_of_2(size)
        size = min(size, self.max_size)
        return size, size

    def _next_power_of_2(self, x):
        return 1 if x == 0 else 2**(x - 1).bit_length()

    def _pack_rectangles(self, width, height):
        root = {'x': 0, 'y': 0, 'w': width, 'h': height}
        packed_rects = []

        for img in self.images:
            rect = {'w': img['width'], 'h': img['height']}
            node = self._find_node(root, rect['w'], rect['h'])
            if node:
                rect['fit'] = self._split_node(node, rect['w'], rect['h'])
            else:
                rect['fit'] = None
            packed_rects.append(rect)

        return packed_rects

    def _find_node(self, root, w, h):
        if root.get('used'):
            return (self._find_node(root.get('right'), w, h) or 
                   self._find_node(root.get('down'), w, h))
        elif w <= root['w'] and h <= root['h']:
            return root
        else:
            return None

    def _split_node(self, node, w, h):
        node['used'] = True
        node['down'] = {
            'x': node['x'], 'y': node['y'] + h,
            'w': node['w'], 'h': node['h'] - h
        }
        node['right'] = {
            'x': node['x'] + w, 'y': node['y'],
            'w': node['w'] - w, 'h': h
        }
        return node

def get_download_link(file_buffer, filename, text):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
    b64 = base64.b64encode(file_buffer.getvalue()).decode()
    return f'<a href="data:application/octet-stream;base64,{b64}" download="{filename}">{text}</a>'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Texture Atlas Packer",
    page_icon="üé®",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üé® Texture Atlas Packer Online")
st.markdown("**–£–ø–∞–∫–æ–≤–∫–∞ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º –≤ –µ–¥–∏–Ω—ã–π –∞—Ç–ª–∞—Å**")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
max_size = st.sidebar.selectbox(
    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∞—Ç–ª–∞—Å–∞:",
    [4096, 8192, 16384],
    index=2
)

st.sidebar.markdown("---")
st.sidebar.markdown("""
### üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ PNG —Ñ–∞–π–ª—ã —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
2. –ù–∞–∂–º–∏—Ç–µ "–£–ø–∞–∫–æ–≤–∞—Ç—å –∞—Ç–ª–∞—Å"  
3. –°–∫–∞—á–∞–π—Ç–µ –≥–æ—Ç–æ–≤—ã–π –∞—Ç–ª–∞—Å –∏ JSON

### ‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –¢–æ–ª—å–∫–æ PNG —Ñ–∞–π–ª—ã
- –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ 200MB
- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–æ–º
""")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø–∞–∫–æ–≤—â–∏–∫–∞
if 'packer' not in st.session_state:
    st.session_state.packer = TextureAtlasPacker(max_size=max_size)
if 'uploaded_files_names' not in st.session_state:
    st.session_state.uploaded_files_names = []

# –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
st.session_state.packer.max_size = max_size

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
col1, col2 = st.columns([2, 1])

with col1:
    st.header("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

    # –ó–∞–≥—Ä—É–∑—á–∏–∫ —Ñ–∞–π–ª–æ–≤
    uploaded_files = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ PNG —Ñ–∞–π–ª—ã:",
        type=['png'],
        accept_multiple_files=True,
        key="file_uploader"
    )

    if uploaded_files:
        new_files = []
        for uploaded_file in uploaded_files:
            if uploaded_file.name not in st.session_state.uploaded_files_names:
                new_files.append(uploaded_file)
                st.session_state.uploaded_files_names.append(uploaded_file.name)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        for uploaded_file in new_files:
            file_buffer = io.BytesIO(uploaded_file.read())
            success, message = st.session_state.packer.add_image(file_buffer, uploaded_file.name)

            if success:
                st.success(message)
            else:
                st.error(message)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if st.session_state.packer.images:
        st.subheader(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(st.session_state.packer.images)}")

        # –ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        cols = st.columns(4)
        for i, img_data in enumerate(st.session_state.packer.images[:8]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8
            with cols[i % 4]:
                st.image(img_data['image'], caption=img_data['name'], width=100)
                st.caption(f"{img_data['width']}√ó{img_data['height']}")

        if len(st.session_state.packer.images) > 8:
            st.caption(f"... –∏ –µ—â–µ {len(st.session_state.packer.images) - 8} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

with col2:
    st.header("üéØ –î–µ–π—Å—Ç–≤–∏—è")

    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", type="secondary"):
        st.session_state.packer = TextureAtlasPacker(max_size=max_size)
        st.session_state.uploaded_files_names = []
        st.rerun()

    st.markdown("---")

    if st.session_state.packer.images:
        if st.button("üì¶ –£–ø–∞–∫–æ–≤–∞—Ç—å –∞—Ç–ª–∞—Å", type="primary"):
            with st.spinner("–£–ø–∞–∫–æ–≤—ã–≤–∞—é –∞—Ç–ª–∞—Å..."):
                atlas, atlas_info, status = st.session_state.packer.pack_textures()

                if atlas:
                    st.session_state.atlas = atlas
                    st.session_state.atlas_info = atlas_info
                    st.session_state.status = status
                else:
                    st.error(status)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
if 'atlas' in st.session_state and st.session_state.atlas:
    st.header("üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç")
    st.success(st.session_state.status)

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üñºÔ∏è –ì–æ—Ç–æ–≤—ã–π –∞—Ç–ª–∞—Å")
        st.image(st.session_state.atlas, caption="Texture Atlas", use_column_width=True)

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –∞—Ç–ª–∞—Å–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        atlas_buffer = io.BytesIO()
        st.session_state.atlas.save(atlas_buffer, format='PNG')

        st.download_button(
            label="üíæ –°–∫–∞—á–∞—Ç—å –∞—Ç–ª–∞—Å (PNG)",
            data=atlas_buffer.getvalue(),
            file_name="texture_atlas.png",
            mime="image/png"
        )

    with col2:
        st.subheader("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ç–ª–∞—Å–µ")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º JSON –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
        st.json(st.session_state.atlas_info)

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º JSON —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        json_data = json.dumps(st.session_state.atlas_info, indent=2, ensure_ascii=False)

        st.download_button(
            label="üíæ –°–∫–∞—á–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (JSON)",
            data=json_data.encode('utf-8'),
            file_name="atlas_coordinates.json",
            mime="application/json"
        )

    # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤ —Å –æ–±–æ–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
    st.subheader("üì¶ –°–∫–∞—á–∞—Ç—å –≤—Å–µ")

    zip_buffer = io.BytesIO()
    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç–ª–∞—Å
        atlas_buffer = io.BytesIO()
        st.session_state.atlas.save(atlas_buffer, format='PNG')
        zip_file.writestr("texture_atlas.png", atlas_buffer.getvalue())

        # –î–æ–±–∞–≤–ª—è–µ–º JSON
        zip_file.writestr("atlas_coordinates.json", json_data.encode('utf-8'))

    st.download_button(
        label="üì¶ –°–∫–∞—á–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤",
        data=zip_buffer.getvalue(),
        file_name="texture_atlas_pack.zip",
        mime="application/zip"
    )

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666;'>
    <p>üé® Texture Atlas Packer Online v1.0 | –°–æ–∑–¥–∞–Ω–æ –¥–ª—è 3D —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤</p>
</div>
""", unsafe_allow_html=True)
